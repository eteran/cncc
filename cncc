#!/usr/bin/env python3

from __future__ import annotations

import concurrent.futures
import difflib
import logging
import os
import re
import sys
from dataclasses import dataclass
from re import Pattern
from typing import List, Optional

import click
import yaml
from clang.cindex import (
    AccessSpecifier,
    CompilationDatabase,
    CursorKind,
    Index,
    LibclangError,
)

FORMAT = '{}:{}:{}: "{}" does not conform to pattern "{}" associated with {}'
DEFAULT_STYLE = "~/.cncc.style"
NAMED_KINDS = {kind.name.lower(): kind for kind in CursorKind.get_all_kinds()}


class CustomFormatter(logging.Formatter):

    grey = "\x1b[38;20m"
    yellow = "\x1b[33;20m"
    red = "\x1b[31;20m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"
    format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s (%(filename)s:%(lineno)d)"

    FORMATS = {
        logging.DEBUG: grey + format + reset,
        logging.INFO: grey + format + reset,
        logging.WARNING: yellow + format + reset,
        logging.ERROR: red + format + reset,
        logging.CRITICAL: bold_red + format + reset,
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)


logger = logging.getLogger("cncc")
logger.setLevel(logging.DEBUG)

# create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)

ch.setFormatter(CustomFormatter())

logger.addHandler(ch)


@dataclass(frozen=True)
class StyleRule:
    name: str = None
    kind: str = None
    regex: Pattern[str] = None
    access_specifier: str = None

    @staticmethod
    def create_name(rule: Dict[str, str]) -> str:
        if "access_specifier" in rule:
            return f"{rule['access_specifier']}:{rule['kind']}"

        return rule["kind"]

    @classmethod
    def create(cls, rule: Dict[str, str]) -> StyleRule:

        try:
            return cls(
                name=cls.create_name(rule),
                kind=NAMED_KINDS[rule["kind"]],
                regex=re.compile(rule["pattern"]),
                access_specifier=rule.get("access_specifier"),
            )
        except KeyError:
            sys.exit("Rule missing pattern specifier")

        sys.exit("Invalid rule entry")


class StyleAnalyzer:
    def __init__(self, file_list: List[str], db_directory: Optional[str] = None) -> None:
        self.compile_db: CompilationDatabase = None
        self.rule_db: List[StyleRule] = None

        if db_directory:
            self.compile_db = CompilationDatabase.fromDirectory(db_directory)

        self.file_list = file_list

    def arguments_for_file(self, filename: str) -> List[str]:
        if not self.compile_db:
            return []

        commands = self.compile_db.getCompileCommands(filename)
        arguments = [arg for cmd in commands for arg in cmd.arguments]

        # remove the compiler executable
        arguments = arguments[1:]

        try:
            index = arguments.index("--")
            return arguments[:index]
        except ValueError:
            return arguments

    def load_style_rules(self, style) -> None:

        try:
            with open(style) as style_file:
                rules = yaml.safe_load(style_file)
        except FileNotFoundError:
            sys.exit(f"Style file {style!r} was not found")

        try:
            self.rule_db = [StyleRule.create(rule) for rule in rules]
        except KeyError as e:
            print(f"{style}: {e.message} is not a valid CursorKind")
            suggestions = difflib.get_close_matches(e.message, NAMED_KINDS.keys(), n=1, cutoff=0.8)
            if suggestions:
                print(f"Did you mean CursorKind: {suggestions[0]}")
            sys.exit(1)

    def rule_for_node(self, node) -> Optional[StyleRule]:
        for rule in self.rule_db:
            if node.kind == rule.kind:
                if (
                    node.access_specifier is AccessSpecifier.INVALID
                    or rule.access_specifier is None
                    or rule.access_specifier.upper() == node.access_specifier.name
                ):
                    return rule

        return None

    def is_invalid(self, node):

        rule = self.rule_for_node(node)
        if not rule:
            return False

        spelling = node.spelling
        if not spelling:
            return False

        return not rule.regex.match(spelling)

    def is_local(self, node):
        return node.location.file and node.location.file.name in self.file_list

    def analyze(self, filename):
        arguments = self.arguments_for_file(filename)

        index = Index.create()
        unit = index.parse(filename, args=arguments)
        cursor = unit.cursor

        notify = [node for node in cursor.walk_preorder() if self.is_local(node) and self.is_invalid(node)]

        for node in notify:
            rule = self.rule_for_node(node)

            msg = FORMAT.format(
                node.location.file.name,
                node.location.line,
                node.location.column,
                node.displayname,
                rule.regex.pattern,
                rule.name,
            )
            logger.warning(msg)


@click.command()
@click.option("--style", default=os.path.expanduser(DEFAULT_STYLE), help=f"user-defined style file, defaults to {DEFAULT_STYLE!r}")
@click.option("--dbdir", default=None, help="build path is used to read a 'compile_commands.json' compile command database")
@click.option("--list-kinds", help="Print a listing of all the known object kinds and then exit", is_flag=True, show_default=True, default=False)
@click.argument("files", nargs=-1)
def main(style: str, dbdir: str, list_kinds: bool, files: List[str]) -> None:

    if list_kinds:
        for kind in sorted(NAMED_KINDS.keys()):
            print(kind)
        sys.exit(0)

    if not files:
        sys.exit(0)

    analyzer = StyleAnalyzer(file_list=files, db_directory=dbdir)
    analyzer.load_style_rules(style)

    for filename in files:
        analyzer.analyze(filename)


if __name__ == "__main__":
    try:
        main()
    except LibclangError as e:
        sys.exit(e)
